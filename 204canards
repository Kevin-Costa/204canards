#!/usr/bin/python

import matplotlib.pyplot as plt
import os, sys
import re
import time
import math
import numpy as np

##########################################################################

def calc(a, t):
    res = a * math.exp(-t) + (4.0 - (3.0 * a)) * math.exp(-2.0 * t) + ((2.0 * a) - 4.0) * math.exp(-4.0 * t)
    return res

def simpson(t, nb):
    res = 0.0
    cal = 0.0
    while t < 10.0:
        cal += t * calc(nb, t)
        t += 0.001
    t = 0.001
    while t < 10.0:
        res += t * calc(nb, t)
        t += 0.001
    result = ((cal * 4.0) + (res * 2.0) + calc(nb, 0.0) + calc(nb, 10.0)) * (10.0 / (6.0 * 10000.0))
    return result

def var(t, nb, esp):
    res = 0.0
    cal = 0.0
    while t < 25.0:
        cal += (t - esp)**2.0 * calc(nb, t)
        t += 0.001
    t = 0.001
    while t < 25.0:
        res += (t - esp)**2.0 * calc(nb, t)
        t += 0.001
    result = ((cal * 4.0) + (res * 2.0) + calc(nb, 0.0) + calc(nb, 10.0)) * (25.0 / (6.0 * 25000.0))
    return result

##########################################################################

if len(sys.argv) == 2:
    try:
       a = float(sys.argv[1])
    except:
        print("\033[1;31mVotre nombre doit etre un float compris entre 0 et 2.5 inclus\033[0m")
        sys.exit(1)
    if a < 0:
        print("\033[1;31mVotre argument est inferieur a 0\033[0m")
        sys.exit(1)
    if a > 2.5:
        print("\033[1;31mVotre argument est superieur a 2.5\033[0m")
    t = 0.0
    res2 = 0.0
    tlist = list()
    densite = list()
    repartition = list()
    p1 = -1.0
    p2 = -1.0
    t1 = -1.0
    t2 = -1.0
    while t < 10.0:
       res = calc(a, t)
       res2 += calc(a, t)
       repartition.append(res2 / 100.0)
       densite.append(res)
       tlist.append(t)
       if (int(t) == 1 and p1 == -1.0):
           p1 = res2
       elif (int(t) == 2 and p2 == -1.0):
           p2 = res2
       elif (int(res2) == 50 and t1 == -1.0):
           t1 = t
       elif (int(res2) == 99 and t2 == -1.0):
           t2 = t
       t += 0.01
    t3 = simpson(0.0, a)
    t4 = var(0.0, a, t3)
    t4 = math.sqrt(t4)
    print("\033[1;33mtemps de retour moyen : \t\t\t    \033[1;31m%d\033[1;33m minute(s) et\033[1;31m %d\033[1;33m secondes" % (int(t3), (t3 - int(t3)) * 60))
    print("\033[1;33mecart-type des temps de retour : \t\t    \033[1;31m%.3f" % t4)
    print("\033[1;33mtemps au bout duquel \033[1;31m50\033[1;33m%% des canards sont revenus :\033[1;31m %.f \033[1;33mminute(s) et\033[1;31m %.f \033[1;33msecondes" % (int(t1), (t1 - int(t1)) * 60))
    print("\033[1;33mtemps au bout duquel \033[1;31m99\033[1;33m%% des canards sont revenus :\033[1;31m %.f \033[1;33mminute(s) et\033[1;31m %.f \033[1;33msecondes" % (int(t2), (t2 - int(t2)) * 60))
    print("\033[1;33mpourcentage de canards revenus apres \033[1;31m1\033[1;33m minute :\t    \033[1;31m%.f \033[1;33m%%" % int(p1))
    print("\033[1;33mpourcentage de canards revenus apres \033[1;31m2\033[1;33m minute :\t   \033[1;31m %.f \033[1;33m%%\033[1;0m" % int(p2))
    try:
        os.environ["DISPLAY"]
    except KeyError:
        print('\033[1;31m/!\ Probleme avec l\'environnement /!\ \033[0m')
        sys.exit(1);
    plt.plot(tlist, repartition, label = 'repartition')
    plt.plot(tlist, densite, label = 'densite')
    plt.ylim(-0.2, 1.00000000000001)
    plt.xlim(0, 10)
    plt.xlabel("temps (minutes)")
    plt.ylabel("probabilite")
    plt.legend(loc=0)
    plt.show()

else:
    print("\033[1;31mUSAGE: ./204canards <nb>\033[0m")
    sys.exit(1)
